// Code generated by goctl. DO NOT EDIT.
// Source: main.proto

package langchain

import (
	"context"

	"github.com/nakamu-ms/micro-services/services/langchain/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AgentsRequest   = pb.AgentsRequest
	AgentsResponse  = pb.AgentsResponse
	ChainsRequest   = pb.ChainsRequest
	ChainsResponse  = pb.ChainsResponse
	IndexesRequest  = pb.IndexesRequest
	IndexesResponse = pb.IndexesResponse
	MemoryRequest   = pb.MemoryRequest
	MemoryResponse  = pb.MemoryResponse
	ModelsRequest   = pb.ModelsRequest
	ModelsResponse  = pb.ModelsResponse
	PromptRequest   = pb.PromptRequest
	PromptResponse  = pb.PromptResponse

	Langchain interface {
		Models(ctx context.Context, in *ModelsRequest, opts ...grpc.CallOption) (*ModelsResponse, error)
		Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
		Indexes(ctx context.Context, in *IndexesRequest, opts ...grpc.CallOption) (*IndexesResponse, error)
		Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error)
		Agents(ctx context.Context, in *AgentsRequest, opts ...grpc.CallOption) (*AgentsResponse, error)
		Memory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
	}

	defaultLangchain struct {
		cli zrpc.Client
	}
)

func NewLangchain(cli zrpc.Client) Langchain {
	return &defaultLangchain{
		cli: cli,
	}
}

func (m *defaultLangchain) Models(ctx context.Context, in *ModelsRequest, opts ...grpc.CallOption) (*ModelsResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Models(ctx, in, opts...)
}

func (m *defaultLangchain) Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Prompt(ctx, in, opts...)
}

func (m *defaultLangchain) Indexes(ctx context.Context, in *IndexesRequest, opts ...grpc.CallOption) (*IndexesResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Indexes(ctx, in, opts...)
}

func (m *defaultLangchain) Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Chains(ctx, in, opts...)
}

func (m *defaultLangchain) Agents(ctx context.Context, in *AgentsRequest, opts ...grpc.CallOption) (*AgentsResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Agents(ctx, in, opts...)
}

func (m *defaultLangchain) Memory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	client := pb.NewLangchainClient(m.cli.Conn())
	return client.Memory(ctx, in, opts...)
}
